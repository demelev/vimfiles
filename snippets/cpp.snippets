# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	
	private:
		${3:/* data */}
	};
	snippet zoomdecl
	//---------- ${1:zoomname} Zoom code --------->
	void $1_OnMouse( int key, int act, int x, int y )
	{

	}

	void $1_OnOpened()
	{
		CheckAreas();
		Graphic::DarkenScreenOn();
	}

	void $1_OnClosed()
	{
		CheckAreas();
		Graphic::DarkenScreenOff();
	}

	void $1_Init()
	{
		$1 = dynamic_cast<Zoom*>(g_level->GetDrawable(Objects::$1));

		$1->SetAnimation( ${2: *Game::zoomScale } );
		$1->afterOpen = $1_OnOpened;
		$1->afterClose = $1_OnClosed;
		$1->mouseCallback = $1_OnMouse;
	}
	//<--------- $1 Zoom code ----------
#Sequence
snippet seq
	BeginSequence(${1:SequenceName})        
		${3:/*Code*/}
	EndSequence
